save()

We can invoke this method outside a transaction, that’s why I don’t like this method to save data. 
If we use this without transaction and we have cascading between entities, then only the primary entity gets saved unless we flush the session.

We should avoid save() outside transaction boundary, otherwise mapped entities will not be saved unless we flush the session. It’s very normal to forget flushing the session because it doesn’t throw any exception or warnings.

Hibernate save() method returns the generated id immediately, this is possible because primary object is saved as soon as save method is invoked.
If there are other objects mapped from the primary object, they gets saved at the time of committing transaction or when we flush the session.

On calling save() the entity becomes persistent, And if you will update the object properties after the save call but before the transaction is committed, it will be saved into database.

For objects that are in persistent state, save updates the data through update query. Notice that it happens when transaction is committed. If there are no changes in the object, there wont be any query fired. If you will run above program multiple times, you will notice that update queries are not fired next time because there is no change in the column values.

public class Employee {
 
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "emp_id")
    private long id;
 
    @Column(name = "emp_name")
    private String name;
 
    @Column(name = "emp_salary")
    private double salary;
 
    @OneToOne(mappedBy = "employee")
    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
    private Address address;
}


public class Address {
 
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "address_id")
    private long id;
 
    @Column(name = "address_line1")
    private String addressLine1;
 
    @Column(name = "zipcode")
    private String zipcode;
 
    @Column(name = "city")
    private String city;
 
    @OneToOne
    @PrimaryKeyJoinColumn
    private Employee employee;
}




SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

 
/*********************************** save() Example - Without Transaction ************************************/

Session session = sessionFactory.openSession();
Employee emp = getTestEmployee();
long id = (Long) session.save(emp);
System.out.println("1. Employee save called without transaction, id="+id);
session.flush(); 																//address will not get saved without this
System.out.println("*****");

OUTPUT :- 
Hibernate: insert into EMPLOYEE (emp_name, emp_salary) values (?, ?)
1. Employee save called without transaction, id=149
Hibernate: insert into ADDRESS (address_line1, city, zipcode, emp_id) values (?, ?, ?, ?)
*****




 
/*********************************** save() Example - With Transaction **************************************/

Transaction tx1 = session.beginTransaction();
Session session1 = sessionFactory.openSession();
Employee emp1 = getTestEmployee();
long id1 = (Long) session1.save(emp1);
System.out.println("2. Employee save called with transaction, id="+id1);
System.out.println("3. Before committing save transaction");
tx1.commit();
System.out.println("4. After committing save transaction");
System.out.println("*****");
 
OUTPUT :-
Hibernate: insert into EMPLOYEE (emp_name, emp_salary) values (?, ?)
2. Employee save called with transaction, id=150
3. Before committing save transaction
Hibernate: insert into ADDRESS (address_line1, city, zipcode, emp_id) values (?, ?, ?, ?)
4. After committing save transaction
*****





/*********************************** save() Example - Existing row in table *********************************/

Session session6 = sessionFactory.openSession();
Transaction tx6 = session6.beginTransaction();
Employee emp6 =  (Employee) session6.load(Employee.class, new Long(20));
 
//update some data
System.out.println("Employee Details="+emp6);
emp6.setName("New Name");
emp6.getAddress().setCity("New City");
 
long id6 = (Long) session6.save(emp6);
emp6.setName("New Name1"); // will get updated in database
System.out.println("5. Employee save called with transaction, id="+id6);
System.out.println("6. Before committing save transaction");
tx6.commit();
System.out.println("7. After committing save transaction");
System.out.println("*****");
 
// Close resources
sessionFactory.close();

OUTPUT :-
Hibernate: select employee0_.emp_id as emp_id1_1_0_, employee0_.emp_name as emp_name2_1_0_, employee0_.emp_salary as emp_sala3_1_0_, address1_.emp_id as emp_id1_0_1_, address1_.address_line1 as address_2_0_1_, address1_.city as city3_0_1_, address1_.zipcode as zipcode4_0_1_ from EMPLOYEE employee0_ left outer join ADDRESS address1_ on employee0_.emp_id=address1_.emp_id where employee0_.emp_id=?
Employee Details=Id= 20, Name= Kumar1, Salary= 1000.0, {Address= AddressLine1= Test address1, City=Blr, Zipcode=12121}
5. Employee save called with transaction, id=20
6. Before committing save transaction
Hibernate: update EMPLOYEE set emp_name=?, emp_salary=? where emp_id=?
Hibernate: update ADDRESS set address_line1=?, city=?, zipcode=? where emp_id=?
7. After committing save transaction
*****
