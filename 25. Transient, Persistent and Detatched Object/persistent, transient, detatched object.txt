UserDetails user=new UserDetails();
user.setUserName("Test user");
session.beginTransaction();
		
session.save(user);
		
user.setUserName("Updated user");			// It won't result in update query.
user.setUserName("Updated user again");		// It is the last change hence will result in update query.
		
session.getTransaction().commit();
session.close();

user.setUserName("Updated user again after session close");

Before passing the object of UserDetails (i.e. 'user') to save()/persist()/saveOrUpdate() method, the object is in "Transient" state.
Once you pass the object in any of these 3 methods, The object comes in "Persistent" state. When an object is in "Persistent" state, Hibernate persists that object and keep track of that object. Here "keep track" means if any modification/updation is done in the properties of that object then that change is also reflected in the DB. So we can say if the object is in "Persistent" state then it is in the synchronization with the DB. And the object remains in the "Persistent" state until you call session.close()/session.clear()/session.evict(). And the last modification in the object is made in DB. so calling close()/clear()/evict() leaves the object in "Detatched" state and object no longer remains in the synchronization with DB. And if the object is in the "Detached" state and if you call update()/saveOrUpdate()/merge() then that object again reaches in "Persistent" state from "Detatched" state.


Here in above example, first of all hibernate will fire an insert query and insert a value "Test user" in DB and then it will consider the last change and fire SINGLE update query and update the value to "Updated user again".

And after closing session, No changes are made to DB.